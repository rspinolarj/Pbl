@model Pbl.Models.AvaliacaoTutoria

@{
    ViewBag.Title = "MontarFichaAvaliativa";
}

<h3>
    Cadastrar Ficha Avaliativa
    <small>Formulário para cadastro de uma ficha avaliativa de um problema do grupo tutorial.</small>
</h3>


@using (Html.BeginForm("CriarAvaliacao", "GerenciarProblemasMinistrados"))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-8">
            <div class="panel panel-default">
                <div class="panel-head">
                    <h5>Ficha Avaliativa</h5>
                </div>
                <div class="panel-body">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.idAvaliacaoTutoria)
                    @Html.HiddenFor(model => model.idProblemaxMed)
                    @Html.HiddenFor(model => model.idGrupo)
                    <div class="row">
                        <div class="form-group">
                            <div class="col-md-2">
                                <label for="idModulo">Módulo: </label>
                                @Html.DropDownList("idModulo", (SelectList)ViewData["idModulo"], string.Empty, new { @id = "selModulo", @required = "required" })
                            </div>
                            <div class="col-md-10"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group" style="display:none" id="divDtInicio">
                                <label>Data de Início</label>
                                @Html.EditorFor(model => model.dtInicio, new { htmlAttributes = new { @class = "form-control input-sm", @type = "date", @onfocus = "validateDataInicio(this)", @id = "dtInicio", @required = "required" } })
                                @Html.ValidationMessageFor(model => model.dtInicio, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group" style="display:none" id="divDtFim">
                                <label>Data Final</label>
                                @Html.EditorFor(model => model.dtFim, new { htmlAttributes = new { @class = "form-control input-sm", @type = "date", @onfocus = "validateDataFim(this)", @id = "dtFim", @required = "required" } })
                                @Html.ValidationMessageFor(model => model.dtFim, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4"></div>
                    </div>

                    <hr class="hidden-print" />
                    <div class="clearfix">
                        <button type="button" class="btn btn-labeled btn-default" onclick="history.back();">
                            <span class="btn-label">
                                <i class="fa fa-arrow-left"></i>
                            </span>Voltar
                        </button>
                        <button type="submit" id="btnSubmit" class="btn btn-labeled btn-success pull-right">
                            <span class="btn-label">
                                <i class="fa fa-check"></i>
                            </span>Cadastrar
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4"></div>
    </div>
}   

    @section Scripts {

        <script>
        var idModuloLista;
        var idModuloSelecionado = '@{if (Model.ControleNotas != null) { @Model.ControleNotas.idModulo } }';
        var dataInicioModulo = '@Model.dtInicio.ToString("yyyy-MM-dd")';
            var dataFimModulo = '@Model.dtFim.ToString("yyyy-MM-dd")';
            var x = document.getElementById("selModulo");

            if ((idModuloSelecionado != '') && (dataInicioModulo != '') && (dataFimModulo != '')){
                document.getElementById('divDtInicio').style.display = "block";
                document.getElementById('divDtFim').style.display = "block";
            $("#dtInicio").val(dataInicioModulo);
            $("#dtFim").val(dataFimModulo);
                var i;
                for (i = 0; i < x.options.length; i++) {
                    if (idModuloSelecionado == x.options[i].value) {
                        document.getElementById("selModulo").selectedIndex = i;
                    }
                }
            }
        

        $('#selModulo').change(function () {
                idModuloSelecionado = document.getElementById('selModulo').value;
                for (i = 0; i < data.length; i++) {
                    if (data[i].idModulo == idModuloSelecionado) {
                        dataInicioModulo = new Date(data[i].dtInicio).toISOString().slice(0, 10);
                        dataFimModulo = new Date(data[i].dtFim).toISOString().slice(0, 10);
                    }
                }
                document.getElementById('divDtInicio').style.display = "block";
            $('#dtInicio').val('');
            $('#dtFim').val('');
            });

        $('#dtInicio').change(function () {
                document.getElementById('divDtFim').style.display = "block";
            });


            var data = @Html.Raw((string)ViewData["modulos"]);

        </script>


        <script>
            function validateDataInicio(dataInicio) {
                $(dataInicio).attr("min", dataInicioModulo);
                $(dataInicio).attr("max", dataFimModulo);
            }

            function validateDataFim(dataFim) {
                var dataInicio = new Date($('#dtInicio').val()).toISOString().slice(0, 10);
                $(dataFim).attr("min", dataInicio);
                $(dataFim).attr("max", dataFimModulo);
            }
        </script>
    }
